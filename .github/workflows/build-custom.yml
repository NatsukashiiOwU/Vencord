name: Build Custom Vencord with Plugins

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Run daily to check for upstream updates
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3 # Install pnpm using packageManager key in package.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Sync with upstream Vencord
        run: |
          git remote add upstream https://github.com/Vendicated/Vencord.git
          git fetch upstream
          git merge upstream/main --allow-unrelated-histories -X theirs
          git push origin main

      - name: Install dependencies
        run: pnpm i

      - name: Add custom plugins
        run: |
          rm -rf src/userplugins/* || true
          mkdir -p src/userplugins
          cd src/userplugins
          git init
          git remote add origin https://github.com/NatsukashiiOwU/vencord_goofy_plugins.git
          git config core.sparseCheckout true
          echo "bulkRoles/" >> .git/info/sparse-checkout
          echo "extractChannelMessages/" >> .git/info/sparse-checkout
          git pull origin main --depth=1 || { echo "Failed to pull plugins"; exit 1; }
          cd ../..
        continue-on-error: false

      - name: Build
        run: pnpm build --standalone

      - name: Clean up obsolete files
        run: |
            rm -rf dist/*-unpacked dist/vendor Vencord.user.css vencordDesktopRenderer.css vencordDesktopRenderer.css.map

      - name: Get some values needed for the release
        id: release_values
        run: |
            echo "release_tag=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Upload DevBuild as release
        if: github.repository == 'NatsukashiiOwU/Vencord'
        run: |
           gh release upload devbuild --clobber dist/*
           gh release edit devbuild --title "DevBuild $RELEASE_TAG"
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           RELEASE_TAG: ${{ env.release_tag }}

      - name: Upload DevBuild to builds repo
        if: github.repository == 'Vendicated/Vencord'
        run: |
           git config --global user.name "$USERNAME"
           git config --global user.email actions@github.com

           git clone https://$USERNAME:$API_TOKEN@github.com/$GH_REPO.git upload
           cd upload

           GLOBIGNORE=.git:.gitignore:README.md:LICENSE
           rm -rf *
           cp -r ../dist/* .

           git add -A
           git commit -m "Builds for https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
           git push --force https://$USERNAME:$API_TOKEN@github.com/$GH_REPO.git
        env:
           API_TOKEN: ${{ secrets.BUILDS_TOKEN }}
           GH_REPO: Vencord/builds
           USERNAME: GitHub-Actions
